{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle } from '@capacitor/core';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These configuration values are available:\n     */\n    PrivacyScreen?: {\n      /**\n       * Configure whether the plugin should be enabled from startup.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default true\n       * @example true\n       */\n      enable?: boolean;\n      /**\n       * Configure whether the plugin should display a custom image from assets instead of a default background gray for the privacy screen.\n       *\n       * Only available for iOS.\n       *\n       * @default \"\"\n       * @example \"Splashscreen\"\n       */\n      imageName?: string;\n      /**\n       * Configure the content mode of displayed image.\n       *\n       * Only available for iOS.\n       *\n       * @default \"center\"\n       * @example \"scaleAspectFit\"\n       * @see https://developer.apple.com/documentation/uikit/uiview/1622619-contentmode\n       */\n      contentMode?:\n        | 'center'\n        | 'scaleToFill'\n        | 'scaleAspectFit'\n        | 'scaleAspectFill';\n      /**\n       * Configure whether the plugin should prevent screenshots if enabled.\n       *\n       * Only available for iOS.\n       *\n       * @default true\n       * @example false\n       * @since 5.2.0\n       */\n      preventScreenshots?: boolean;\n    };\n  }\n}\n\nexport interface PrivacyScreenPlugin {\n  /**\n   * Enables the privacy screen protection.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 1.1.0\n   */\n  enable(): Promise<void>;\n  /**\n   * Disables the privacy screen protection.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 1.1.0\n   */\n  disable(): Promise<void>;\n  /**\n   * Called when the screen recording is started.\n   *\n   * Only available on iOS for now.\n   *\n   * @since 3.0.2\n   */\n  addListener(\n    eventName: 'screenRecordingStarted',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when the screen recording is stopped.\n   *\n   * Only available on iOS for now.\n   *\n   * @since 3.0.2\n   */\n  addListener(\n    eventName: 'screenRecordingStopped',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Called when the screenshot is taken.\n   *\n   * Only available on iOS for now.\n   *\n   * @since 3.2.0\n   */\n  addListener(\n    eventName: 'screenshotTaken',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle>;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 3.0.2\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}