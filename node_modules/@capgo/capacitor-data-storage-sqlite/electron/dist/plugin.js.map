{"version":3,"file":"plugin.js","sources":["../build/electron/src/electron-utils/Data.js","../build/electron/src/electron-utils/UtilsSQLite.js","../build/electron/src/electron-utils/StorageDatabaseHelper.js","../build/electron/src/electron-utils/json-utils.js","../build/electron/src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Data = void 0;\nclass Data {\n}\nexports.Data = Data;\n//# sourceMappingURL=Data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UtilsSQLite = void 0;\nclass UtilsSQLite {\n    constructor() {\n        this.pathDB = \"./DataStorage\";\n        this.Path = null;\n        this.NodeFs = null;\n        this.SQLite3 = null;\n        this.Path = require(\"path\");\n        this.NodeFs = require(\"fs\");\n        this.SQLite3 = require(\"sqlite3\");\n    }\n    async connection(dbName, readOnly) {\n        const flags = readOnly\n            ? this.SQLite3.OPEN_READONLY\n            : this.SQLite3.OPEN_CREATE | this.SQLite3.OPEN_READWRITE;\n        // get the path for the database\n        try {\n            const dbPath = await this.getDBPath(dbName);\n            const dbOpen = new this.SQLite3.Database(dbPath, flags);\n            return Promise.resolve(dbOpen);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getWritableDatabase(dbName) {\n        const db = await this.connection(dbName, false /*,secret*/);\n        return db;\n    }\n    async getReadableDatabase(dbName) {\n        const db = await this.connection(dbName, true /*,secret*/);\n        return db;\n    }\n    isFileExists(dbName) {\n        const dbFolder = this.pathDB;\n        const path = this.Path.join(dbFolder, dbName);\n        let ret = false;\n        try {\n            if (this.NodeFs.existsSync(path)) {\n                ret = true;\n            }\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDBPath(dbName) {\n        let retPath = null;\n        const dbFolder = this.pathDB;\n        retPath = this.Path.join(dbFolder, dbName);\n        try {\n            if (!this.NodeFs.existsSync(dbFolder)) {\n                await this.mkdirSyncRecursive(dbFolder);\n            }\n            return Promise.resolve(retPath);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async mkdirSyncRecursive(directory) {\n        const path = directory.replace(/\\/$/, \"\").split(\"/\");\n        for (let i = 1; i <= path.length; i++) {\n            const segment = path.slice(0, i).join(\"/\");\n            segment.length > 0 && !this.NodeFs.existsSync(segment)\n                ? this.NodeFs.mkdirSync(segment)\n                : null;\n        }\n        return;\n    }\n}\nexports.UtilsSQLite = UtilsSQLite;\n//# sourceMappingURL=UtilsSQLite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StorageDatabaseHelper = void 0;\nconst Data_1 = require(\"./Data\");\nconst UtilsSQLite_1 = require(\"./UtilsSQLite\");\nconst COL_ID = \"id\";\nconst COL_NAME = \"name\";\nconst COL_VALUE = \"value\";\nclass StorageDatabaseHelper {\n    constructor() {\n        this.Path = null;\n        this.NodeFs = null;\n        this.isOpen = false;\n        this.Path = require(\"path\");\n        this.NodeFs = require(\"fs\");\n        this._utils = new UtilsSQLite_1.UtilsSQLite();\n    }\n    async openStore(dbName, tableName) {\n        try {\n            this.db = await this._utils.connection(dbName, false);\n            if (this.db !== null) {\n                await this._createTable(tableName);\n                this.dbName = dbName;\n                this.tableName = tableName;\n                this.isOpen = true;\n                return Promise.resolve();\n            }\n            else {\n                this.dbName = \"\";\n                this.tableName = \"\";\n                this.isOpen = false;\n                return Promise.reject(`connection to store ${dbName}`);\n            }\n        }\n        catch (err) {\n            this.dbName = \"\";\n            this.tableName = \"\";\n            this.isOpen = false;\n            return Promise.reject(err);\n        }\n    }\n    async closeStore(dbName) {\n        if (dbName === this.dbName && this.isOpen && this.db != null) {\n            try {\n                await this.db.close();\n                this.dbName = \"\";\n                this.tableName = \"\";\n                this.isOpen = false;\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        else {\n            return Promise.reject(`Store ${dbName} not opened`);\n        }\n    }\n    async isStoreExists(dbName) {\n        let ret = false;\n        try {\n            ret = await this._utils.isFileExists(dbName);\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async _createTable(tableName) {\n        const CREATE_STORAGE_TABLE = \"CREATE TABLE IF NOT EXISTS \" +\n            tableName +\n            \"(\" +\n            COL_ID +\n            \" INTEGER PRIMARY KEY AUTOINCREMENT,\" + // Define a primary key\n            COL_NAME +\n            \" TEXT NOT NULL UNIQUE,\" +\n            COL_VALUE +\n            \" TEXT\" +\n            \")\";\n        try {\n            if (this.db != null) {\n                return this.db.run(CREATE_STORAGE_TABLE, async (err) => {\n                    if (err) {\n                        return Promise.reject(`Error: in createTable ${err.message}`);\n                    }\n                    else {\n                        try {\n                            await this._createIndex(tableName);\n                            return Promise.resolve();\n                        }\n                        catch (err) {\n                            return Promise.reject(err);\n                        }\n                    }\n                });\n            }\n            else {\n                return Promise.reject(`connection to store ${this.dbName}`);\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async _createIndex(tableName) {\n        const idx = `index_${tableName}_on_${COL_NAME}`;\n        const CREATE_INDEX_NAME = \"CREATE INDEX IF NOT EXISTS \" +\n            idx +\n            \" ON \" +\n            tableName +\n            \" (\" +\n            COL_NAME +\n            \")\";\n        try {\n            if (this.db != null) {\n                return this.db.run(CREATE_INDEX_NAME, async (err) => {\n                    if (err) {\n                        return Promise.reject(`Error: in createIndex ${err.message}`);\n                    }\n                    else {\n                        return Promise.resolve();\n                    }\n                });\n            }\n            else {\n                return Promise.reject(`connection to store ${this.dbName}`);\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setTable(tableName) {\n        try {\n            await this._createTable(tableName);\n            this.tableName = tableName;\n            return Promise.resolve();\n        }\n        catch (err) {\n            this.tableName = \"\";\n            return Promise.reject(err);\n        }\n    }\n    // Insert a data into the database\n    async set(data) {\n        if (this.db == null) {\n            return Promise.reject(`this.db is null in set`);\n        }\n        try {\n            // Check if data.name does not exist otherwise update it\n            const res = await this.get(data.name);\n            if (res.id != null) {\n                // exists so update it\n                await this.update(data);\n                return Promise.resolve();\n            }\n            else {\n                // does not exist add it\n                const DATA_INSERT = `INSERT INTO \"${this.tableName}\" \n                                (\"${COL_NAME}\", \"${COL_VALUE}\") \n                                VALUES (?, ?)`;\n                return this.db.run(DATA_INSERT, [data.name, data.value], (err) => {\n                    if (err) {\n                        return Promise.reject(`Data INSERT: ${err.message}`);\n                    }\n                    else {\n                        return Promise.resolve();\n                    }\n                });\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    // get a Data\n    async get(name) {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in get`);\n            }\n            const DATA_SELECT_QUERY = `SELECT * FROM ${this.tableName} WHERE ${COL_NAME} = '${name}'`;\n            this.db.all(DATA_SELECT_QUERY, (err, rows) => {\n                if (err) {\n                    const data = new Data_1.Data();\n                    data.id = null;\n                    resolve(data);\n                }\n                else {\n                    let data = new Data_1.Data();\n                    if (rows.length >= 1) {\n                        data = rows[0];\n                    }\n                    else {\n                        data.id = null;\n                    }\n                    resolve(data);\n                }\n            });\n        });\n    }\n    // update a Data\n    async update(data) {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in update`);\n            }\n            const DATA_UPDATE = `UPDATE \"${this.tableName}\" \n                        SET \"${COL_VALUE}\" = ? WHERE \"${COL_NAME}\" = ?`;\n            this.db.run(DATA_UPDATE, [data.value, data.name], (err) => {\n                if (err) {\n                    reject(`Data UPDATE: ${err.message}`);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    // isKey exists\n    async iskey(name) {\n        if (this.db == null) {\n            return Promise.reject(`this.db is null in clear`);\n        }\n        try {\n            const res = await this.get(name);\n            if (res.id != null) {\n                return Promise.resolve(true);\n            }\n            else {\n                return Promise.resolve(false);\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    // remove a key\n    async remove(name) {\n        if (this.db == null) {\n            return Promise.reject(`this.db is null in clear`);\n        }\n        try {\n            const res = await this.get(name);\n            if (res.id != null) {\n                const DATA_DELETE = `DELETE FROM \"${this.tableName}\" \n                            WHERE \"${COL_NAME}\" = ?`;\n                return this.db.run(DATA_DELETE, name, (err) => {\n                    if (err) {\n                        return Promise.reject(`Data DELETE: ${err.message}`);\n                    }\n                    else {\n                        return Promise.resolve();\n                    }\n                });\n            }\n            else {\n                return Promise.reject(`REMOVE key does not exist`);\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    // remove all keys\n    async clear() {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in clear`);\n            }\n            const DATA_DELETE = `DELETE FROM \"${this.tableName}\"`;\n            this.db.exec(DATA_DELETE, (err) => {\n                if (err) {\n                    reject(`Data CLEAR: ${err.message}`);\n                }\n                else {\n                    // set back the key primary index to 0\n                    const DATA_UPDATE = `UPDATE SQLITE_SEQUENCE SET SEQ = ? `;\n                    this.db.run(DATA_UPDATE, 0, (err) => {\n                        if (err) {\n                            reject(`Data UPDATE SQLITE_SEQUENCE: ${err.message}`);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                }\n            });\n        });\n    }\n    async keys() {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in clear`);\n            }\n            try {\n                let SELECT_KEYS = `SELECT \"${COL_NAME}\" FROM `;\n                SELECT_KEYS += `\"${this.tableName}\" ORDER BY ${COL_NAME};`;\n                this.db.all(SELECT_KEYS, (err, rows) => {\n                    if (err) {\n                        reject(`Keys: ${err.message}`);\n                    }\n                    else {\n                        let arKeys = [];\n                        for (let i = 0; i < rows.length; i++) {\n                            arKeys = [...arKeys, rows[i].name];\n                            if (i === rows.length - 1) {\n                                resolve(arKeys);\n                            }\n                        }\n                    }\n                });\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        });\n    }\n    async values() {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in clear`);\n            }\n            try {\n                let SELECT_VALUES = `SELECT \"${COL_VALUE}\" FROM `;\n                SELECT_VALUES += `\"${this.tableName}\" ORDER BY ${COL_NAME};`;\n                this.db.all(SELECT_VALUES, (err, rows) => {\n                    if (err) {\n                        reject(`Values: ${err.message}`);\n                    }\n                    else {\n                        let arValues = [];\n                        for (let i = 0; i < rows.length; i++) {\n                            arValues = [...arValues, rows[i].value];\n                            if (i === rows.length - 1) {\n                                resolve(arValues);\n                            }\n                        }\n                    }\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    async filtervalues(filter) {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in clear`);\n            }\n            try {\n                if (!filter.startsWith(\"%\") && !filter.endsWith(\"%\")) {\n                    filter = \"%\" + filter + \"%\";\n                }\n                let SELECT_VALUES = `SELECT \"${COL_VALUE}\" FROM `;\n                SELECT_VALUES += `\"${this.tableName}\" WHERE name `;\n                SELECT_VALUES += `LIKE \"${filter}\" ORDER BY ${COL_NAME}`;\n                this.db.all(SELECT_VALUES, (err, rows) => {\n                    if (err) {\n                        reject(`FilterValues: ${err.message}`);\n                    }\n                    else {\n                        let arValues = [];\n                        for (let i = 0; i < rows.length; i++) {\n                            arValues = [...arValues, rows[i].value];\n                            if (i === rows.length - 1) {\n                                resolve(arValues);\n                            }\n                        }\n                    }\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    async keysvalues() {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`this.db is null in clear`);\n            }\n            try {\n                let SELECT_KEYSVALUES = `SELECT \"${COL_NAME}\" , \"${COL_VALUE}\"`;\n                SELECT_KEYSVALUES += ` FROM \"${this.tableName}\" ORDER BY ${COL_NAME};`;\n                this.db.all(SELECT_KEYSVALUES, (err, rows) => {\n                    if (err) {\n                        reject(`KeysValues: ${err.message}`);\n                    }\n                    else {\n                        resolve(rows);\n                    }\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    async deleteStore(dbName) {\n        const dbPath = this.Path.join(this._utils.pathDB, dbName);\n        try {\n            this.NodeFs.unlinkSync(dbPath);\n            //file removed\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        return new Promise((resolve, reject) => {\n            if (this.db == null) {\n                reject(`isTable: this.db is null`);\n            }\n            try {\n                let ret = false;\n                const SELECT_TABLES = \"SELECT name FROM sqlite_master \" + \"WHERE TYPE='table';\";\n                this.db.all(SELECT_TABLES, (err, rows) => {\n                    if (err) {\n                        reject(`isTable: ${err.message}`);\n                    }\n                    else {\n                        let arTables = [];\n                        for (let i = 0; i < rows.length; i++) {\n                            arTables = [...arTables, rows[i].name];\n                            if (i === rows.length - 1) {\n                                if (arTables.includes(table))\n                                    ret = true;\n                                resolve(ret);\n                            }\n                        }\n                    }\n                });\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        });\n    }\n    async tables() {\n        return new Promise((resolve, reject) => {\n            try {\n                const SELECT_TABLES = \"SELECT name FROM sqlite_master \" +\n                    \"WHERE TYPE='table' ORDER BY name;\";\n                this.db.all(SELECT_TABLES, (err, rows) => {\n                    if (err) {\n                        reject(`tables: ${err.message}`);\n                    }\n                    else {\n                        let arTables = [];\n                        for (let i = 0; i < rows.length; i++) {\n                            if (rows[i].name != \"sqlite_sequence\") {\n                                arTables = [...arTables, rows[i].name];\n                            }\n                            if (i === rows.length - 1) {\n                                resolve(arTables);\n                            }\n                        }\n                    }\n                });\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        });\n    }\n    async deleteTable(table) {\n        if (this.db == null) {\n            return Promise.reject(`this.db is null in deleteTable`);\n        }\n        try {\n            const ret = await this.isTable(table);\n            if (ret) {\n                const DROP_STMT = `DROP TABLE IF EXISTS ${table};`;\n                return this.db.exec(DROP_STMT, (err) => {\n                    if (err) {\n                        return Promise.reject(`deleteTable: ${err.message}`);\n                    }\n                    else {\n                        return Promise.resolve();\n                    }\n                });\n            }\n            else {\n                return Promise.resolve();\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async importJson(values) {\n        let changes = 0;\n        for (const val of values) {\n            try {\n                const data = new Data_1.Data();\n                data.name = val.key;\n                data.value = val.value;\n                await this.set(data);\n                changes += 1;\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        return Promise.resolve(changes);\n    }\n    async exportJson() {\n        const retJson = {};\n        try {\n            const prevTableName = this.tableName;\n            retJson.database = this.dbName.slice(0, -9);\n            retJson.encrypted = false;\n            retJson.tables = [];\n            // get the table list\n            const tables = await this.tables();\n            for (const table of tables) {\n                this.tableName = table;\n                const retTable = {};\n                retTable.name = table;\n                retTable.values = [];\n                const dataTable = await this.keysvalues();\n                for (const tdata of dataTable) {\n                    const retData = {};\n                    retData.key = tdata.name;\n                    retData.value = tdata.value;\n                    retTable.values = [...retTable.values, retData];\n                }\n                retJson.tables = [...retJson.tables, retTable];\n            }\n            this.tableName = prevTableName;\n            return Promise.resolve(retJson);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nexports.StorageDatabaseHelper = StorageDatabaseHelper;\n//# sourceMappingURL=StorageDatabaseHelper.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValue = exports.isTable = exports.isJsonStore = void 0;\n/**\n * IsJsonSQLite\n * @param obj\n */\nconst isJsonStore = (obj) => {\n    const keyFirstLevel = [\"database\", \"encrypted\", \"tables\"];\n    if (obj == null ||\n        (Object.keys(obj).length === 0 && obj.constructor === Object))\n        return false;\n    for (const key of Object.keys(obj)) {\n        if (keyFirstLevel.indexOf(key) === -1)\n            return false;\n        if (key === \"database\" && typeof obj[key] != \"string\")\n            return false;\n        if (key === \"encrypted\" && typeof obj[key] != \"boolean\")\n            return false;\n        if (key === \"tables\" && typeof obj[key] != \"object\")\n            return false;\n        if (key === \"tables\") {\n            for (const oKey of obj[key]) {\n                const retTable = (0, exports.isTable)(oKey);\n                if (!retTable)\n                    return false;\n            }\n        }\n    }\n    return true;\n};\nexports.isJsonStore = isJsonStore;\n/**\n * IsTable\n * @param obj\n */\nconst isTable = (obj) => {\n    const keyTableLevel = [\"name\", \"values\"];\n    if (obj == null ||\n        (Object.keys(obj).length === 0 && obj.constructor === Object)) {\n        return false;\n    }\n    for (const key of Object.keys(obj)) {\n        if (keyTableLevel.indexOf(key) === -1)\n            return false;\n        if (key === \"name\" && typeof obj[key] != \"string\")\n            return false;\n        if (key === \"values\" && typeof obj[key] != \"object\")\n            return false;\n        if (key === \"values\") {\n            for (const oKey of obj[key]) {\n                const retValue = (0, exports.isValue)(oKey);\n                if (!retValue)\n                    return false;\n            }\n        }\n    }\n    return true;\n};\nexports.isTable = isTable;\n/**\n * IsValue\n * @param obj\n */\nconst isValue = (obj) => {\n    const keyTableLevel = [\"key\", \"value\"];\n    if (obj == null ||\n        (Object.keys(obj).length === 0 && obj.constructor === Object)) {\n        return false;\n    }\n    for (const key of Object.keys(obj)) {\n        if (keyTableLevel.indexOf(key) === -1)\n            return false;\n        if (key === \"key\" && typeof obj[key] != \"string\")\n            return false;\n        if (key === \"value\" && typeof obj[key] != \"string\")\n            return false;\n    }\n    return true;\n};\nexports.isValue = isValue;\n//# sourceMappingURL=json-utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CapgoCapacitorDataStorageSqlite = void 0;\nconst Data_1 = require(\"./electron-utils/Data\");\nconst StorageDatabaseHelper_1 = require(\"./electron-utils/StorageDatabaseHelper\");\nconst json_utils_1 = require(\"./electron-utils/json-utils\");\nclass CapgoCapacitorDataStorageSqlite {\n    constructor() {\n        this.mDb = new StorageDatabaseHelper_1.StorageDatabaseHelper();\n    }\n    async echo(options) {\n        const ret = {};\n        ret.value = options.value ? options.value : \"\";\n        return Promise.resolve(ret);\n    }\n    async openStore(options) {\n        const dbName = options.database\n            ? `${options.database}SQLite.db`\n            : \"storageSQLite.db\";\n        const tableName = options.table ? options.table : \"storage_store\";\n        try {\n            await this.mDb.openStore(dbName, tableName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeStore(options) {\n        const dbName = options.database\n            ? `${options.database}SQLite.db`\n            : \"storageSQLite.db\";\n        if (this.mDb.dbName === dbName && this.mDb.isOpen) {\n            try {\n                await this.mDb.closeStore(dbName);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    async isStoreOpen(options) {\n        const dbName = options.database\n            ? `${options.database}SQLite.db`\n            : \"storageSQLite.db\";\n        let ret = false;\n        if (this.mDb.dbName === dbName && this.mDb.isOpen) {\n            ret = true;\n        }\n        return Promise.resolve({ result: ret });\n    }\n    async isStoreExists(options) {\n        const dbName = options.database\n            ? `${options.database}SQLite.db`\n            : \"storageSQLite.db\";\n        let ret = false;\n        try {\n            ret = await this.mDb.isStoreExists(dbName);\n            return Promise.resolve({ result: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setTable(options) {\n        const tableName = options.table;\n        if (tableName == null) {\n            return Promise.reject(\"Must provide a table name\");\n        }\n        try {\n            await this.mDb.setTable(tableName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(\"Must open a store first\");\n        }\n    }\n    async set(options) {\n        const key = options.key;\n        if (key == null) {\n            return Promise.reject(\"Must provide key\");\n        }\n        const value = options.value;\n        if (value == null) {\n            return Promise.reject(\"Must provide value\");\n        }\n        const data = new Data_1.Data();\n        data.name = key;\n        data.value = value;\n        try {\n            await this.mDb.set(data);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async get(options) {\n        let ret;\n        const key = options.key;\n        if (key == null) {\n            return Promise.reject(\"Must provide key\");\n        }\n        try {\n            const data = await this.mDb.get(key);\n            ret = (data === null || data === void 0 ? void 0 : data.id) != null ? data.value : \"\";\n            return Promise.resolve({ value: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async remove(options) {\n        try {\n            const key = options.key;\n            if (key == null) {\n                return Promise.reject(\"Must provide key\");\n            }\n            await this.mDb.remove(key);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async clear() {\n        try {\n            await this.mDb.clear();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async iskey(options) {\n        let ret;\n        const key = options.key;\n        if (key == null) {\n            return Promise.reject(\"Must provide key\");\n        }\n        try {\n            ret = await this.mDb.iskey(key);\n            return Promise.resolve({ result: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async keys() {\n        try {\n            const ret = await this.mDb.keys();\n            return Promise.resolve({ keys: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async values() {\n        try {\n            const ret = await this.mDb.values();\n            return Promise.resolve({ values: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async filtervalues(options) {\n        const filter = options.filter;\n        if (filter == null || typeof filter != \"string\") {\n            return Promise.reject(\"Must Must provide filter as string\");\n        }\n        try {\n            const ret = await this.mDb.filtervalues(filter);\n            return Promise.resolve({ values: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async keysvalues() {\n        const ret = [];\n        try {\n            const results = await this.mDb.keysvalues();\n            for (const result of results) {\n                const res = { key: result.name, value: result.value };\n                ret.push(res);\n            }\n            return Promise.resolve({ keysvalues: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteStore(options) {\n        let dbName = options.database;\n        if (dbName == null) {\n            return Promise.reject(\"Must provide a Database Name\");\n        }\n        dbName = `${options.database}SQLite.db`;\n        try {\n            await this.mDb.deleteStore(dbName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(options) {\n        const table = options.table;\n        if (table == null) {\n            return Promise.reject(\"Must provide a Table Name\");\n        }\n        try {\n            const ret = await this.mDb.isTable(table);\n            return Promise.resolve({ result: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async tables() {\n        try {\n            const ret = await this.mDb.tables();\n            return Promise.resolve({ tables: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteTable(options) {\n        const table = options.table;\n        if (table == null) {\n            return Promise.reject(\"Must provide a Table Name\");\n        }\n        try {\n            await this.mDb.deleteTable(table);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(options) {\n        const keys = Object.keys(options);\n        if (!keys.includes(\"jsonstring\")) {\n            return Promise.reject(\"Must provide a json object\");\n        }\n        let totalChanges = 0;\n        if (options === null || options === void 0 ? void 0 : options.jsonstring) {\n            const jsonStrObj = options.jsonstring;\n            const jsonObj = JSON.parse(jsonStrObj);\n            const isValid = (0, json_utils_1.isJsonStore)(jsonObj);\n            if (!isValid) {\n                return Promise.reject(\"Must provide a valid JsonSQLite Object\");\n            }\n            const vJsonObj = jsonObj;\n            const dbName = vJsonObj.database\n                ? `${vJsonObj.database}SQLite.db`\n                : \"storageSQLite.db\";\n            for (const table of vJsonObj.tables) {\n                const tableName = table.name ? table.name : \"storage_store\";\n                try {\n                    // Open the database\n                    await this.mDb.openStore(dbName, tableName);\n                    // Import the JsonSQLite Object\n                    if (table === null || table === void 0 ? void 0 : table.values) {\n                        const changes = await this.mDb.importJson(table.values);\n                        totalChanges += changes;\n                    }\n                }\n                catch (err) {\n                    return Promise.reject(`ImportFromJson: ${err}`);\n                }\n                finally {\n                    await this.mDb.closeStore(dbName);\n                }\n            }\n            return Promise.resolve({ changes: totalChanges });\n        }\n        else {\n            return Promise.reject(\"Must provide a json object\");\n        }\n    }\n    async isJsonValid(options) {\n        const keys = Object.keys(options);\n        if (!keys.includes(\"jsonstring\")) {\n            return Promise.reject(\"Must provide a json object\");\n        }\n        if (options === null || options === void 0 ? void 0 : options.jsonstring) {\n            const jsonStrObj = options.jsonstring;\n            const jsonObj = JSON.parse(jsonStrObj);\n            const isValid = (0, json_utils_1.isJsonStore)(jsonObj);\n            if (!isValid) {\n                return Promise.reject(\"Stringify Json Object not Valid\");\n            }\n            else {\n                return Promise.resolve({ result: true });\n            }\n        }\n        else {\n            return Promise.reject(\"Must provide in options a stringify Json Object\");\n        }\n    }\n    async exportToJson() {\n        try {\n            const ret = await this.mDb.exportJson();\n            return Promise.resolve({ export: ret });\n        }\n        catch (err) {\n            return Promise.reject(`exportToJson: ${err.message}`);\n        }\n    }\n}\nexports.CapgoCapacitorDataStorageSqlite = CapgoCapacitorDataStorageSqlite;\n//# sourceMappingURL=index.js.map"],"names":["Data_1","UtilsSQLite_1","StorageDatabaseHelper_1","require$$0","require$$1","require$$2","require$$3","CapgoCapacitorDataStorageSqlite_1"],"mappings":"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"}